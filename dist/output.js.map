{"version":3,"sources":["../src/output.js"],"names":["util","require","toText","v","replace","toLowerCase","trim","Output","code","subcode","msg","Object","defineProperty","value","writable","define","name","NewOutput","clone","call","prototype","attach","bizData","assign","toObject","output","constructor","sub","subOutput","p","hasOwnProperty","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,QAAR,CAAb;;AAEA,IAAMC,SAAS,SAATA,MAAS,CAAUC,CAAV,EAAa;AACxB,WAAOA,EAAEC,OAAF,CAAU,UAAV,EAAsB,KAAtB,EAA6BC,WAA7B,GAA2CC,IAA3C,EAAP;AACH,CAFD;;AAIA;;;;;;;;;AASA,SAASC,MAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqC;AACjC,SAAKF,IAAL,GAAYA,IAAZ;AACAC,gBAAY,KAAKA,OAAL,GAAeA,OAA3B;AACAC,YAAQ,KAAKA,GAAL,GAAWA,GAAnB;;AAEAC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC,EAACC,OAAOL,IAAR,EAAcM,UAAU,KAAxB,EAApC;AACH;;AAED;;;;;;;;;AASAP,OAAOQ,MAAP,GAAgB,UAAUC,IAAV,EAAgBP,OAAhB,EAAyBC,GAAzB,EAA8B;AAC1C,QAAMO,YAAYjB,KAAKkB,KAAL,CAAWC,IAAX,CAAgBZ,MAAhB,EAAwBS,IAAxB,CAAlB;AACA,QAAMR,OAAON,OAAOc,IAAP,CAAb;AACA,WAAO,IAAIC,SAAJ,CAAcT,IAAd,EAAoBC,OAApB,EAA6BC,GAA7B,CAAP;AACH,CAJD;;AAMA;;;;;AAKAH,OAAOa,SAAP,CAAiBC,MAAjB,GAA0B,UAAUC,OAAV,EAAmB;AACzC,WAAOtB,KAAKuB,MAAL,CAAY,IAAZ,EAAkBD,OAAlB,CAAP;AACH,CAFD;;AAIA;;;;;AAKAf,OAAOa,SAAP,CAAiBI,QAAjB,GAA4B,YAAY;AACpC,WAAOxB,KAAKuB,MAAL,CAAY,EAAZ,EAAgB,IAAhB,CAAP;AACH,CAFD;;AAIA;;;;;;;AAOAhB,OAAOa,SAAP,CAAiBF,KAAjB,GAAyB,UAAUf,CAAV,EAAa;AAClC,QAAMsB,SAAS,IAAI,KAAKC,WAAT,CAAqB,KAAKlB,IAA1B,EAAgC,KAAKC,OAArC,EAA8C,KAAKC,GAAnD,CAAf;AACA,WAAOV,KAAKuB,MAAL,CAAYE,MAAZ,EAAoBtB,CAApB,CAAP;AACH,CAHD;;AAKA;;;;;;;AAOAI,OAAOa,SAAP,CAAiBO,GAAjB,GAAuB,UAAUC,SAAV,EAAqB;AACxC,SAAK,IAAMC,CAAX,IAAgBD,SAAhB,EAA2B;AACvB,YAAIA,UAAUE,cAAV,CAAyBD,CAAzB,CAAJ,EAAiC;AAC7B,gBAAIA,MAAM,MAAV,EAAkB;AACd,qBAAKpB,OAAL,GAAemB,UAAUC,CAAV,CAAf;AACH,aAFD,MAEO,IAAIA,MAAM,KAAV,EAAiB;AACpB,qBAAKnB,GAAL,GAAWkB,UAAUC,CAAV,KAAgB,KAAKnB,GAAhC;AACH,aAFM,MAEA;AACH,qBAAKmB,CAAL,IAAUD,UAAUC,CAAV,CAAV;AACH;AACJ;AACJ;;AAED,WAAO,IAAP;AACH,CAdD;;AAgBAE,OAAOC,OAAP,GAAiBzB,MAAjB","file":"output.js","sourcesContent":["const util = require('./util');\n\nconst toText = function (v) {\n    return v.replace(/([A-Z])/g, ' $1').toLowerCase().trim();\n};\n\n/**\n * 抽象方法（包括native服务方法和Rest API）调用统一返回（输出）类型，\n * 可以从其或展出标识不通语义的输出结果子类，但是内部结构不变\n * @param {string} code - 输出结果标识码\n * @param {string} subcode - 输出结果标识子码\n * @param {string} msg - 输出结果提示消息\n * @constructor\n * @class\n */\nfunction Output (code, subcode, msg) {\n    this.code = code;\n    subcode && (this.subcode = subcode);\n    msg && (this.msg = msg);\n\n    Object.defineProperty(this, 'code', {value: code, writable: false});\n}\n\n/**\n * Define a new Output class and return the initiated instance\n * 定义一个新输出结果类型，并返回一个初始化好数据的新实例\n * @param name - the name of the new Output class\n * @param {string} code - the code of the new Output class's instance\n * @param {string} subcode - the subcode of the new Output class's instance\n * @param {string} msg - the msg of the new Output class's instance\n * @returns {Output}\n */\nOutput.define = function (name, subcode, msg) {\n    const NewOutput = util.clone.call(Output, name);\n    const code = toText(name);\n    return new NewOutput(code, subcode, msg);\n};\n\n/**\n * Attach more biz data for the output\n * 附加更多业务数据，并返回本对象\n * @returns {Output}\n */\nOutput.prototype.attach = function (bizData) {\n    return util.assign(this, bizData);\n};\n\n/**\n * Transform and return the pure object of the instance\n * 转换并返回一个本实例对象的一个纯JSON对象，不带类型，用于调用方消费\n * @returns {object} 纯JSON对象\n */\nOutput.prototype.toObject = function () {\n    return util.assign({}, this);\n};\n\n/**\n * 克隆当前对象并返回一个附加业务数据的新的结果输出对象\n * @example\n * Ok.clone({user: userLoaded});\n * @param {object} v - 克隆的同时，附加的业务数据对象\n * @returns {Output}\n */\nOutput.prototype.clone = function (v) {\n    const output = new this.constructor(this.code, this.subcode, this.msg);\n    return util.assign(output, v);\n};\n\n/**\n * Make an output to be subordinated to the current output.\n * 使当前对象附加一个子输出结果类型，增加更多的语义，帮助调用方进行业务\n * 判断和后续流程选择\n * @param subOutput 待附加的子类型对象\n * @returns {Output} 返回附加数据后的本对象\n */\nOutput.prototype.sub = function (subOutput) {\n    for (const p in subOutput) {\n        if (subOutput.hasOwnProperty(p)) {\n            if (p === 'code') {\n                this.subcode = subOutput[p];\n            } else if (p === 'msg') {\n                this.msg = subOutput[p] || this.msg;\n            } else {\n                this[p] = subOutput[p];\n            }\n        }\n    }\n\n    return this;\n};\n\nmodule.exports = Output;\n"]}